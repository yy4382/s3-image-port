/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as UploadImport } from "./routes/upload";
import { Route as GalleryImport } from "./routes/gallery";
import { Route as AboutImport } from "./routes/about";
import { Route as R404Import } from "./routes/404";
import { Route as SettingsRouteImport } from "./routes/settings/route";
import { Route as IndexImport } from "./routes/index";
import { Route as SettingsIndexImport } from "./routes/settings/index";
import { Route as SettingsUploadImport } from "./routes/settings/upload";
import { Route as SettingsS3Import } from "./routes/settings/s3";
import { Route as SettingsProfileImport } from "./routes/settings/profile";

// Create/Update Routes

const UploadRoute = UploadImport.update({
  id: "/upload",
  path: "/upload",
  getParentRoute: () => rootRoute,
} as any);

const GalleryRoute = GalleryImport.update({
  id: "/gallery",
  path: "/gallery",
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRoute,
} as any);

const R404Route = R404Import.update({
  id: "/404",
  path: "/404",
  getParentRoute: () => rootRoute,
} as any);

const SettingsRouteRoute = SettingsRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const SettingsIndexRoute = SettingsIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => SettingsRouteRoute,
} as any);

const SettingsUploadRoute = SettingsUploadImport.update({
  id: "/upload",
  path: "/upload",
  getParentRoute: () => SettingsRouteRoute,
} as any);

const SettingsS3Route = SettingsS3Import.update({
  id: "/s3",
  path: "/s3",
  getParentRoute: () => SettingsRouteRoute,
} as any);

const SettingsProfileRoute = SettingsProfileImport.update({
  id: "/profile",
  path: "/profile",
  getParentRoute: () => SettingsRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/404": {
      id: "/404";
      path: "/404";
      fullPath: "/404";
      preLoaderRoute: typeof R404Import;
      parentRoute: typeof rootRoute;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    "/gallery": {
      id: "/gallery";
      path: "/gallery";
      fullPath: "/gallery";
      preLoaderRoute: typeof GalleryImport;
      parentRoute: typeof rootRoute;
    };
    "/upload": {
      id: "/upload";
      path: "/upload";
      fullPath: "/upload";
      preLoaderRoute: typeof UploadImport;
      parentRoute: typeof rootRoute;
    };
    "/settings/profile": {
      id: "/settings/profile";
      path: "/profile";
      fullPath: "/settings/profile";
      preLoaderRoute: typeof SettingsProfileImport;
      parentRoute: typeof SettingsRouteImport;
    };
    "/settings/s3": {
      id: "/settings/s3";
      path: "/s3";
      fullPath: "/settings/s3";
      preLoaderRoute: typeof SettingsS3Import;
      parentRoute: typeof SettingsRouteImport;
    };
    "/settings/upload": {
      id: "/settings/upload";
      path: "/upload";
      fullPath: "/settings/upload";
      preLoaderRoute: typeof SettingsUploadImport;
      parentRoute: typeof SettingsRouteImport;
    };
    "/settings/": {
      id: "/settings/";
      path: "/";
      fullPath: "/settings/";
      preLoaderRoute: typeof SettingsIndexImport;
      parentRoute: typeof SettingsRouteImport;
    };
  }
}

// Create and export the route tree

interface SettingsRouteRouteChildren {
  SettingsProfileRoute: typeof SettingsProfileRoute;
  SettingsS3Route: typeof SettingsS3Route;
  SettingsUploadRoute: typeof SettingsUploadRoute;
  SettingsIndexRoute: typeof SettingsIndexRoute;
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsProfileRoute: SettingsProfileRoute,
  SettingsS3Route: SettingsS3Route,
  SettingsUploadRoute: SettingsUploadRoute,
  SettingsIndexRoute: SettingsIndexRoute,
};

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/settings": typeof SettingsRouteRouteWithChildren;
  "/404": typeof R404Route;
  "/about": typeof AboutRoute;
  "/gallery": typeof GalleryRoute;
  "/upload": typeof UploadRoute;
  "/settings/profile": typeof SettingsProfileRoute;
  "/settings/s3": typeof SettingsS3Route;
  "/settings/upload": typeof SettingsUploadRoute;
  "/settings/": typeof SettingsIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/404": typeof R404Route;
  "/about": typeof AboutRoute;
  "/gallery": typeof GalleryRoute;
  "/upload": typeof UploadRoute;
  "/settings/profile": typeof SettingsProfileRoute;
  "/settings/s3": typeof SettingsS3Route;
  "/settings/upload": typeof SettingsUploadRoute;
  "/settings": typeof SettingsIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/settings": typeof SettingsRouteRouteWithChildren;
  "/404": typeof R404Route;
  "/about": typeof AboutRoute;
  "/gallery": typeof GalleryRoute;
  "/upload": typeof UploadRoute;
  "/settings/profile": typeof SettingsProfileRoute;
  "/settings/s3": typeof SettingsS3Route;
  "/settings/upload": typeof SettingsUploadRoute;
  "/settings/": typeof SettingsIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/settings"
    | "/404"
    | "/about"
    | "/gallery"
    | "/upload"
    | "/settings/profile"
    | "/settings/s3"
    | "/settings/upload"
    | "/settings/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/404"
    | "/about"
    | "/gallery"
    | "/upload"
    | "/settings/profile"
    | "/settings/s3"
    | "/settings/upload"
    | "/settings";
  id:
    | "__root__"
    | "/"
    | "/settings"
    | "/404"
    | "/about"
    | "/gallery"
    | "/upload"
    | "/settings/profile"
    | "/settings/s3"
    | "/settings/upload"
    | "/settings/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren;
  R404Route: typeof R404Route;
  AboutRoute: typeof AboutRoute;
  GalleryRoute: typeof GalleryRoute;
  UploadRoute: typeof UploadRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  R404Route: R404Route,
  AboutRoute: AboutRoute,
  GalleryRoute: GalleryRoute,
  UploadRoute: UploadRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/404",
        "/about",
        "/gallery",
        "/upload"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings/route.tsx",
      "children": [
        "/settings/profile",
        "/settings/s3",
        "/settings/upload",
        "/settings/"
      ]
    },
    "/404": {
      "filePath": "404.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/gallery": {
      "filePath": "gallery.tsx"
    },
    "/upload": {
      "filePath": "upload.tsx"
    },
    "/settings/profile": {
      "filePath": "settings/profile.tsx",
      "parent": "/settings"
    },
    "/settings/s3": {
      "filePath": "settings/s3.tsx",
      "parent": "/settings"
    },
    "/settings/upload": {
      "filePath": "settings/upload.tsx",
      "parent": "/settings"
    },
    "/settings/": {
      "filePath": "settings/index.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
